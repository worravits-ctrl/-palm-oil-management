import re
from flask import Blueprint, render_template, request, jsonify, current_app
from models import db
import google.generativeai as genai
from datetime import datetime

ai_bp = Blueprint("ai", __name__)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∏‡∏ó‡∏ò‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä
def get_current_thai_date():
    now = datetime.now()
    thai_months = [
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ]
    thai_year = now.year + 543
    thai_month = thai_months[now.month - 1]
    return f"{now.day} {thai_month} {thai_year}"

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
current_thai_date = get_current_thai_date()

SYSTEM_PROMPT = (
    f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ß‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite ‡∏ä‡∏∑‡πà‡∏≠ palm_farm.db "
    f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_thai_date} (‡∏û‡∏∏‡∏ó‡∏ò‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä) "
    "‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏°‡∏µ‡∏™‡∏≤‡∏£‡∏∞ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç "
    "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏û‡∏∏‡∏ó‡∏ò‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä (‡∏û.‡∏®.) ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ "
    "‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°-‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:\n\n"
    
    "üå¥ **‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å - ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏õ‡∏≤‡∏•‡πå‡∏°:**\n"
    "- harvest_income(id, date, total_weight_kg, price_per_kg, gross_amount, harvesting_wage, net_amount, note, created_at)\n"
    "  * date = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏õ‡∏≤‡∏•‡πå‡∏° (‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏™‡∏ß‡∏ô‡∏Ç‡∏≤‡∏¢‡∏õ‡∏≤‡∏•‡πå‡∏°‡πÉ‡∏´‡πâ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô)\n"
    "  * total_weight_kg = ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏≤‡∏•‡πå‡∏°‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)\n"
    "  * price_per_kg = ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠ (‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.)\n"
    "  * gross_amount = ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å √ó ‡∏£‡∏≤‡∏Ñ‡∏≤)\n"
    "  * harvesting_wage = ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏Ñ‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß/‡∏ï‡∏±‡∏î‡∏õ‡∏≤‡∏•‡πå‡∏°\n"
    "  * net_amount = ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏™‡∏∏‡∏ó‡∏ò‡∏¥ (‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° - ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á)\n"
    "  * note = ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°\n"
    "  * created_at = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n\n"
    
    "üåæ **‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ - ‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢:**\n"
    "- fertilizer_records(id, date, item, sacks, unit_price, spreading_wage, total_amount, note, created_at)\n"
    "  * date = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢\n"
    "  * item = ‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πã‡∏¢ (‡πÄ‡∏ä‡πà‡∏ô 16-16-8, ‡∏¢‡∏π‡πÄ‡∏£‡∏µ‡∏¢)\n"
    "  * sacks = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏£‡∏∞‡∏™‡∏≠‡∏ö\n"
    "  * unit_price = ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏Å‡∏£‡∏∞‡∏™‡∏≠‡∏ö\n"
    "  * spreading_wage = ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏´‡∏ß‡πà‡∏≤‡∏ô‡∏õ‡∏∏‡πã‡∏¢ (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô 0 ‡∏´‡∏≤‡∏Å‡∏ó‡∏≥‡πÄ‡∏≠‡∏á)\n"
    "  * total_amount = ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏° (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏∏‡πã‡∏¢ + ‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á)\n\n"
    
    "üéØ **‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î - ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏£‡∏≤‡∏¢‡∏ï‡πâ‡∏ô:**\n"
    "- harvest_details(id, date, palm_id, bunch_count, remarks, created_at)\n"
    "  * date = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß\n"
    "  * palm_id = ‡∏£‡∏´‡∏±‡∏™‡∏ï‡πâ‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏° (‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á palms)\n"
    "  * bunch_count = ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏∞‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏î‡πâ\n"
    "  * remarks = ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô\n\n"
    
    "üóíÔ∏è **‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å - ‡πÇ‡∏ô‡πä‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå:**\n"
    "- notes(id, date, title, content, created_at)\n"
    "  * date = ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå\n"
    "  * title = ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠\n"
    "  * content = ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå\n\n"
    
    "üå≥ **‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏≤‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå:**\n"
    "- palms(id, code): ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏° (A1-L26 ‡∏£‡∏ß‡∏° 312 ‡∏ï‡πâ‡∏ô)\n"
    "- users(id, username, email, password_hash, created_at): ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n\n"
    
    "üìä **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö Cross-Table:**\n"
    "‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ-‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ (‡∏Å‡∏≥‡πÑ‡∏£/‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô)\n"
    "‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ\n"
    "‚Ä¢ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ROI ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏õ‡∏∏‡πã‡∏¢\n"
    "‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå seasonal patterns ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏µ\n"
    "‚Ä¢ ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï\n"
    "‚Ä¢ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏° (‡∏ó‡∏∞‡∏•‡∏≤‡∏¢/‡∏ï‡πâ‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)\n"
    "‚Ä¢ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏õ‡∏∏‡πã‡∏¢‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ\n\n"
    
    "üîç **‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á:**\n"
    "‚Ä¢ ‡πÉ‡∏ä‡πâ JOIN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á\n"
    "‚Ä¢ ‡πÉ‡∏ä‡πâ subquery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô\n"
    "‚Ä¢ ‡πÉ‡∏ä‡πâ window functions: ROW_NUMBER(), RANK(), LAG()\n"
    "‚Ä¢ ‡πÉ‡∏ä‡πâ CASE WHEN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n"
    "‚Ä¢ ‡πÉ‡∏ä‡πâ DATE functions: strftime('%Y-%m') ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n"
    "‚Ä¢ ‡πÉ‡∏ä‡πâ aggregate functions: SUM, AVG, COUNT, MAX, MIN\n\n"
    
    "‚ö†Ô∏è **‡∏Ç‡πâ‡∏≠‡∏´‡πâ‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:** ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SELECT ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ INSERT, UPDATE, DELETE, DROP, ALTER, ATTACH, PRAGMA\n"
    "‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL query ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå\n"
    "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD (‡∏Ñ.‡∏®.) ‡πÅ‡∏ï‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®. ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏ó‡∏¢\n"
    "üéØ **‡∏à‡∏∏‡∏î‡πÄ‡∏ô‡πâ‡∏ô:** ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£‡∏Ç‡∏≠‡∏á‡∏™‡∏ß‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏° ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏•‡∏Å‡∏≥‡πÑ‡∏£"
)

def allow_sql(sql: str) -> bool:
    sql_lc = sql.lower()
    # allow only select queries, no semicolons chaining
    if not sql_lc.strip().startswith("select"):
        return False
    forbidden = ["insert", "update", "delete", "drop", "alter", "attach", "pragma", "create", "replace"]
    return not any(w in sql_lc for w in forbidden)

@ai_bp.route("/chat")
def chat_page():
    return render_template("chat.html")

@ai_bp.route("/api/chat", methods=["POST"])
def chat_api():
    data = request.get_json(force=True)
    message = data.get("message", "").strip()
    if not message:
        return jsonify({"error": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á"}), 400

    api_key = current_app.config.get("GOOGLE_API_KEY", "")
    if not api_key or api_key == "your-google-api-key-here":
        return jsonify({
            "answer": "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google API Key\n\n" +
                     "üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:\n" +
                     "1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://aistudio.google.com/app/apikey\n" +
                     "2. ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Google (‡∏ü‡∏£‡∏µ)\n" +
                     "3. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'Create API Key'\n" +
                     "4. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å API Key ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ\n" +
                     "5. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå .env ‡πÉ‡∏™‡πà API Key ‡πÉ‡∏´‡∏°‡πà\n" +
                     "6. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏õ\n\n" +
                     "üí° API Key ‡∏ü‡∏£‡∏µ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ 15 requests/minute"
        }), 200

    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel("gemini-1.5-flash")
    except Exception as e:
        error_msg = str(e)
        if "API_KEY_INVALID" in error_msg or "not valid" in error_msg:
            return jsonify({
                "answer": "‚ùå Google API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n" +
                         "üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢:\n" +
                         "1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡πÉ‡∏ô .env ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n" +
                         "2. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà https://aistudio.google.com/app/apikey\n" +
                         "3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå .env ‡∏î‡πâ‡∏ß‡∏¢ API Key ‡πÉ‡∏´‡∏°‡πà\n" +
                         "4. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏õ (Ctrl+C ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)\n\n" +
                         f"üîç ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_msg[:100]}..."
            }), 200
        else:
            return jsonify({"answer": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•: {error_msg[:200]}..."}), 200

    # Ask model to propose a single safe SELECT query
    prompt = f"""
{SYSTEM_PROMPT}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {message}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
{{
  "sql": "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SELECT ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î) ‡∏´‡∏£‡∏∑‡∏≠ \" \" ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ SQL",
  "summary_hint": "‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"
}}

‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á SQL:
- ‡πÉ‡∏ä‡πâ JOIN ‡∏Å‡∏±‡∏ö palms ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏°: "JOIN palms p ON hd.palm_id = p.id"
- ‡πÉ‡∏ä‡πâ strftime('%Y-%m') ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
- ‡πÉ‡∏ä‡πâ DATE('now') ‡∏´‡∏£‡∏∑‡∏≠ DATE('now', 'start of month') ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
- ‡πÉ‡∏ä‡πâ subquery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á
- ‡πÉ‡∏ä‡πâ CASE WHEN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ sql ‡πÄ‡∏õ‡πá‡∏ô "" ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô summary_hint
‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÉ‡∏ä‡πâ aggregate functions ‡πÅ‡∏•‡∏∞ window functions
‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° ‡πÉ‡∏ä‡πâ ORDER BY date ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
"""
    try:
        resp = model.generate_content(prompt)
        text = resp.text or ""
    except Exception as e:
        error_msg = str(e)
        if "API_KEY_INVALID" in error_msg or "not valid" in error_msg:
            return jsonify({
                "answer": "‚ùå Google API Key ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n" +
                         "üîÑ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢:\n" +
                         "1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://aistudio.google.com/app/apikey\n" +
                         "2. ‡∏•‡∏ö API Key ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)\n" +
                         "3. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà\n" +
                         "4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå .env\n" +
                         "5. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏õ\n\n" +
                         "üí° ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á API Key ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
            }), 200
        elif "quota" in error_msg.lower() or "limit" in error_msg.lower():
            return jsonify({
                "answer": "‚è∞ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API\n\n" +
                         "üîç ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:\n" +
                         "‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 15 requests/minute (‡∏ü‡∏£‡∏µ)\n" +
                         "‚Ä¢ ‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô\n" +
                         "‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\n\n" +
                         "‚è≥ ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà Google AI Studio"
            }), 200
        else:
            return jsonify({"answer": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•: {error_msg[:200]}..."}), 200

    # best-effort JSON extraction
    import json, re
    match = re.search(r"\{[\s\S]*\}", text)
    sql = ""
    summary_hint = ""
    if match:
        try:
            obj = json.loads(match.group(0))
            sql = (obj.get("sql") or "").strip()
            summary_hint = (obj.get("summary_hint") or "").strip()
        except Exception:
            pass

    rows = []
    columns = []
    final_answer = ""
    
    if sql and allow_sql(sql):
        try:
            res = db.session.execute(db.text(sql))
            columns = list(res.keys())
            rows = [list(r) for r in res.fetchall()]
            
            # Generate final summary with AI
            if rows:
                summary_prompt = f"""
‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {message}
SQL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ: {sql}
‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {columns}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß: {len(rows)}
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å: {rows[:5]}

{summary_hint}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°:
1. ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å
2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
3. ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
4. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏™‡∏ß‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏° (‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
5. ‡∏ä‡∏µ‡πâ‡πÅ‡∏à‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà emoji ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
"""
                try:
                    summary_resp = model.generate_content(summary_prompt)
                    final_answer = summary_resp.text or summary_hint
                except Exception as summary_error:
                    # If summary fails, use the hint instead
                    final_answer = summary_hint + f"\n\n(‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ)"
            else:
                final_answer = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"
                
        except Exception as e:
            return jsonify({"answer": f"SQL ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)[:200]}..."}), 200
    else:
        if sql:
            return jsonify({"answer": "SQL ‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ SELECT"}), 200
        else:
            # Direct answer without SQL
            final_answer = summary_hint

    return jsonify({
        "sql": sql,
        "columns": columns,
        "rows": rows,
        "answer": final_answer
    })
