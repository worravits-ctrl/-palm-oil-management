import re
from flask import Blueprint, render_template, request, jsonify, current_app
from models import db
import google.generativeai as genai
from datetime import datetime

ai_bp = Blueprint("ai", __name__)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∏‡∏ó‡∏ò‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä
def get_current_thai_date():
    now = datetime.now()
    thai_months = [
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ]
    thai_year = now.year + 543
    thai_month = thai_months[now.month - 1]
    return f"{now.day} {thai_month} {thai_year}"

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
current_thai_date = get_current_thai_date()

SYSTEM_PROMPT = (
    f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ß‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {current_thai_date} "
    "‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏ï‡∏£‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° "
    "‡πÉ‡∏ä‡πâ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏û.‡∏®. ‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ "
    "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SQLite:\n\n"
    
    "**‡∏ï‡∏≤‡∏£‡∏≤‡∏á:**\n"
    "‚Ä¢ harvest_income: ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏õ‡∏≤‡∏•‡πå‡∏° (date, total_weight_kg, price_per_kg, gross_amount, harvesting_wage, net_amount)\n"
    "‚Ä¢ fertilizer_records: ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏∏‡πã‡∏¢ (date, item, sacks, unit_price, spreading_wage, total_amount)\n"
    "‚Ä¢ harvest_details: ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏£‡∏≤‡∏¢‡∏ï‡πâ‡∏ô (date, palm_id, bunch_count, remarks)\n"
    "‚Ä¢ notes: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå (date, title, content)\n"
    "‚Ä¢ palms: ‡∏ï‡πâ‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏° A1-L26 (312 ‡∏ï‡πâ‡∏ô)\n"
    "‚Ä¢ users: ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n\n"
    
    "**‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:**\n"
    "‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏ ‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡πÄ‡∏ä‡πà‡∏ô 15) ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15 ‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ: WHERE strftime('%d', date) = '15'\n"
    "‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô) ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ: WHERE strftime('%m', date) = '09'\n"
    "‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏ ‡∏ß‡∏±‡∏ô+‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏ä‡πà‡∏ô 15 ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô) ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ: WHERE strftime('%m-%d', date) = '09-15'\n"
    "‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏ ‡∏õ‡∏µ (‡πÄ‡∏ä‡πà‡∏ô 2568, 2025) ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏õ‡∏µ‡∏ô‡∏±‡πâ‡∏ô: WHERE strftime('%Y', date) = '2025'\n"
    "‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏ ‡∏ß‡∏±‡∏ô/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ ‡πÅ‡∏ö‡∏ö‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô: WHERE date = '2025-09-15'\n"
    "‚Ä¢ ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏ó‡∏¢: ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°=01, ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå=02, ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°=03, ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô=04, ‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°=05, ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô=06, ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°=07, ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°=08, ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô=09, ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°=10, ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô=11, ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°=12\n"
    "‚Ä¢ ‡∏õ‡∏µ ‡∏û.‡∏®. ‚Üí ‡∏Ñ.‡∏®.: ‡∏û.‡∏®. - 543 (‡πÄ‡∏ä‡πà‡∏ô 2568 ‚Üí 2025)\n\n"
    
    "**‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏∞‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î (harvest_details):**\n"
    "‚Ä¢ ‡∏ô‡∏±‡∏ö‡∏ó‡∏∞‡∏•‡∏≤‡∏¢‡∏£‡∏ß‡∏°: SELECT COALESCE(SUM(bunch_count), 0) as total_bunches FROM harvest_details WHERE ...\n"
    "‚Ä¢ ‡∏ô‡∏±‡∏ö‡∏ó‡∏∞‡∏•‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏ô: SELECT p.code, SUM(hd.bunch_count) FROM harvest_details hd JOIN palms p ON hd.palm_id = p.id WHERE ... GROUP BY p.code\n"
    "‚Ä¢ ‡∏ô‡∏±‡∏ö‡∏ó‡∏∞‡∏•‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: SELECT date, SUM(bunch_count) FROM harvest_details WHERE ... GROUP BY date ORDER BY date\n"
    "‚Ä¢ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‚Üí ‡∏£‡∏ß‡∏°‡∏ó‡∏∞‡∏•‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ï‡∏±‡∏î: SELECT COALESCE(SUM(bunch_count), 0) FROM harvest_details\n"
    "‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡∏ï‡πâ‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏°‡πÑ‡∏´‡∏ô ‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô ‡∏ï‡∏±‡∏î‡∏Å‡∏µ‡πà‡∏ó‡∏∞‡∏•‡∏≤‡∏¢\n\n"
    
    "**‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏õ‡∏≤‡∏•‡πå‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ:**\n"
    "‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏ñ‡∏≤‡∏° '‡∏ï‡∏±‡∏î‡∏õ‡∏≤‡∏•‡πå‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà' ‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏Ç‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î + 15 ‡∏ß‡∏±‡∏ô\n"
    "‚Ä¢ SQL: SELECT DATE(MAX(date), '+15 days') as next_harvest_date FROM harvest_income\n"
    "‚Ä¢ ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ\n"
    "‚Ä¢ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡πÑ‡∏ó‡∏¢ ‡∏û.‡∏®. ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢\n"
    "‚Ä¢ ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏Ç‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ\n\n"
    
    "**‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á:**\n"
    "‚Ä¢ ‡πÉ‡∏ä‡πâ UNION ALL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n"
    "‚Ä¢ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: SELECT date, '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ' as type, net_amount as amount FROM harvest_income WHERE ... UNION ALL SELECT date, '‡∏õ‡∏∏‡πã‡∏¢' as type, total_amount FROM fertilizer_records WHERE ...\n"
    "‚Ä¢ ‡∏´‡∏≤‡∏Å SUM ‡∏´‡∏£‡∏∑‡∏≠ COUNT ‡πÄ‡∏õ‡πá‡∏ô NULL ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á 0\n"
    "‚Ä¢ ‡πÉ‡∏ä‡πâ COALESCE(SUM(...), 0) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°\n"
    "‚Ä¢ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏≤‡∏° ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á\n\n"
    
    "**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:** ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ SELECT ‡∏´‡πâ‡∏≤‡∏° INSERT/UPDATE/DELETE\n"
    "**‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:** ‡∏ï‡∏≠‡∏ö‡∏ï‡∏£‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô"
)

def allow_sql(sql: str) -> bool:
    sql_lc = sql.lower()
    # allow only select queries, no semicolons chaining
    if not sql_lc.strip().startswith("select"):
        return False
    forbidden = ["insert", "update", "delete", "drop", "alter", "attach", "pragma", "create", "replace"]
    return not any(w in sql_lc for w in forbidden)

@ai_bp.route("/chat")
def chat_page():
    return render_template("chat.html")

@ai_bp.route("/api/chat", methods=["POST"])
def chat_api():
    data = request.get_json(force=True)
    message = data.get("message", "").strip()
    if not message:
        return jsonify({"error": "‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á"}), 400

    api_key = current_app.config.get("GOOGLE_API_KEY", "")
    if not api_key or api_key == "your-google-api-key-here":
        return jsonify({
            "answer": "‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google API Key\n\n" +
                     "üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:\n" +
                     "1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://aistudio.google.com/app/apikey\n" +
                     "2. ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Google (‡∏ü‡∏£‡∏µ)\n" +
                     "3. ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° 'Create API Key'\n" +
                     "4. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å API Key ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ\n" +
                     "5. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå .env ‡πÉ‡∏™‡πà API Key ‡πÉ‡∏´‡∏°‡πà\n" +
                     "6. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏õ\n\n" +
                     "üí° API Key ‡∏ü‡∏£‡∏µ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ 15 requests/minute"
        }), 200

    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel("gemini-1.5-flash")
    except Exception as e:
        error_msg = str(e)
        if "API_KEY_INVALID" in error_msg or "not valid" in error_msg:
            return jsonify({
                "answer": "‚ùå Google API Key ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n" +
                         "üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢:\n" +
                         "1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key ‡πÉ‡∏ô .env ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n" +
                         "2. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà https://aistudio.google.com/app/apikey\n" +
                         "3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå .env ‡∏î‡πâ‡∏ß‡∏¢ API Key ‡πÉ‡∏´‡∏°‡πà\n" +
                         "4. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏õ (Ctrl+C ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà)\n\n" +
                         f"üîç ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {error_msg[:100]}..."
            }), 200
        else:
            return jsonify({"answer": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•: {error_msg[:200]}..."}), 200

    # Ask model to propose a single safe SELECT query
    prompt = f"""
{SYSTEM_PROMPT}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {message}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:
{{
  "sql": "‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SELECT ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (1 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î) ‡∏´‡∏£‡∏∑‡∏≠ \" \" ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ SQL",
  "summary_hint": "‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à"
}}

‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á SQL:
- ‡πÉ‡∏ä‡πâ JOIN ‡∏Å‡∏±‡∏ö palms ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏ô‡∏õ‡∏≤‡∏•‡πå‡∏°: "JOIN palms p ON hd.palm_id = p.id"
- ‡πÉ‡∏ä‡πâ strftime('%Y-%m') ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
- ‡πÉ‡∏ä‡πâ DATE('now') ‡∏´‡∏£‡∏∑‡∏≠ DATE('now', 'start of month') ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
- ‡πÉ‡∏ä‡πâ subquery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á
- ‡πÉ‡∏ä‡πâ CASE WHEN ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
- ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ: "SELECT MAX(date) as last_sale, DATE(MAX(date), '+15 days') as next_harvest FROM harvest_income"

‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ sql ‡πÄ‡∏õ‡πá‡∏ô "" ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô summary_hint
‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÉ‡∏ä‡πâ aggregate functions ‡πÅ‡∏•‡∏∞ window functions
‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° ‡πÉ‡∏ä‡πâ ORDER BY date ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
‡∏´‡∏≤‡∏Å‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏õ‡∏≤‡∏•‡πå‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì date arithmetic ‡∏î‡πâ‡∏ß‡∏¢ DATE(date, '+15 days')
"""
    try:
        resp = model.generate_content(prompt)
        text = resp.text or ""
    except Exception as e:
        error_msg = str(e)
        if "API_KEY_INVALID" in error_msg or "not valid" in error_msg:
            return jsonify({
                "answer": "‚ùå Google API Key ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n\n" +
                         "üîÑ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢:\n" +
                         "1. ‡πÑ‡∏õ‡∏ó‡∏µ‡πà https://aistudio.google.com/app/apikey\n" +
                         "2. ‡∏•‡∏ö API Key ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)\n" +
                         "3. ‡∏™‡∏£‡πâ‡∏≤‡∏á API Key ‡πÉ‡∏´‡∏°‡πà\n" +
                         "4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå .env\n" +
                         "5. ‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡πÅ‡∏≠‡∏õ\n\n" +
                         "üí° ‡∏ö‡∏≤‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á API Key ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"
            }), 200
        elif "quota" in error_msg.lower() or "limit" in error_msg.lower():
            return jsonify({
                "answer": "‚è∞ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API\n\n" +
                         "üîç ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:\n" +
                         "‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 15 requests/minute (‡∏ü‡∏£‡∏µ)\n" +
                         "‚Ä¢ ‡πÄ‡∏Å‡∏¥‡∏ô‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô\n" +
                         "‚Ä¢ ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ\n\n" +
                         "‚è≥ ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡∏ó‡∏µ‡πà Google AI Studio"
            }), 200
        else:
            return jsonify({"answer": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•: {error_msg[:200]}..."}), 200

    # best-effort JSON extraction
    import json, re
    match = re.search(r"\{[\s\S]*\}", text)
    sql = ""
    summary_hint = ""
    if match:
        try:
            obj = json.loads(match.group(0))
            sql = (obj.get("sql") or "").strip()
            summary_hint = (obj.get("summary_hint") or "").strip()
        except Exception:
            pass

    rows = []
    columns = []
    final_answer = ""
    
    if sql and allow_sql(sql):
        try:
            res = db.session.execute(db.text(sql))
            columns = list(res.keys())
            rows = [list(r) for r in res.fetchall()]
            
            # Generate final summary with AI
            if rows and any(any(cell is not None for cell in row) for row in rows):
                # ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
                summary_prompt = f"""
‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {message}
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {columns} ({len(rows)} ‡πÅ‡∏ñ‡∏ß)
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {rows[:3]}

‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏ï‡∏£‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏û.‡∏®. ‡∏´‡∏≤‡∏Å NULL ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô 0
"""
                try:
                    summary_resp = model.generate_content(summary_prompt)
                    final_answer = summary_resp.text or summary_hint
                except Exception as summary_error:
                    final_answer = summary_hint + f"\n\n(‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ)"
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô NULL ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                if "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ" in message.lower() or "‡πÄ‡∏á‡∏¥‡∏ô" in message.lower() or "‡∏ö‡∏≤‡∏ó" in message.lower():
                    final_answer = "0 ‡∏ö‡∏≤‡∏ó (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏)"
                elif "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô" in message.lower() or "‡∏Å‡∏µ‡πà" in message.lower():
                    final_answer = "0 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏)"  
                else:
                    final_answer = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"
                
        except Exception as e:
            return jsonify({"answer": f"SQL ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)[:200]}..."}), 200
    else:
        if sql:
            return jsonify({"answer": "SQL ‡πÑ‡∏°‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ SELECT"}), 200
        else:
            # Direct answer without SQL
            final_answer = summary_hint

    return jsonify({
        "sql": sql,
        "columns": columns,
        "rows": rows,
        "answer": final_answer
    })
